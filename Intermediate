import random
import time
import math
import copy
from Tkinter import*
window = Tk() 
canvas = Canvas(window, width=500, height=400, bg='white') 
canvas.pack(padx=10,pady=10)
listavoidx=[]
listavoidy=[]
ob1=1
score=0
score1=Label(window, text="the amount of times the treasure has be found is %s" %(score))
class object1:
    def __init__(self,x=50,y0=50,sizex=4,sizey=4,colour='blue'):
        self.x0=x0
        self.y0=y0
        self.sizex=sizex
        self.sizey=sizey
        self.colour=colour

    def drawRobot(self, canvas): 
        self.canvas = canvas
        self.shape = canvas.create_oval(self.x0, self.y0, self.x0 + self.sizex, self.y0 + self.sizey, fill=self.colour)

    def drawObstacle(self, canvas):
        self.l1=len(listavoidx)
        self.l2=len(listavoidy)
        self.l3=0
        self.sizex1=30
        self.sizey1=30
        self.x02=random.randint(15,400)
        self.y02=random.randint(150,475)
        self.xEnd=self.sizex1+self.x02
        self.yEnd=self.sizey1+self.y02
        while self.l3<50:
            l=0
            while l<self.l1:
                if listavoidx[l]-self.xEnd<=self.sizex :
                    if self.x02>listavoidx[l]:
                        self.x02=50+self.x02
                        self.xEnd=50+self.xEnd
                    else:
                        self.x02=self.x02-50
                        self.xEnd= self.xEnd-50
                if listavoidy[l]-self.yEnd <=self.sizey:
                    if self.y02<=listavoidy[l]:
                        self.y02=self.y02-50
                        self.yEnd=self.yEnd-50
                    else:
                        self.y02=self.y02+50
                        self.yEnd=self.yEnd +50
                if self.x02<0:
                        self.x02=(50+self.sizex)+self.x0
                        self.xEnd=(50+self.sizex)+self.xEnd                
                if self.xEnd>500:
                        self.x02=self.x02-(50+self.sizex)
                        self.xEnd=self.xEnd-(50+self.sizex)
                if self.y02<0:
                        self.y02=(50+self.sizey)+self.y02
                        self.xEnd=(50+self.sizey)+self.xEnd
                if self.yEnd>400:
                        self.y02=self.y02-(50+self.sizey)  
                        self.yEnd=self.yEnd-(50+self.sizey)  
                l+=1
            self.l3+=1        
        listavoidx.append (self.x02)
        listavoidy.append (self.y02)
        self.shape1 = canvas.create_oval(self.x02, self.y02, self.xEnd, self.yEnd, fill='grey')
        return(self.l1)
    
class treasure(object1):
    def __init__(self,x0=random.randint(15,400),y0=0,sizex=4,sizey=4,colour='blue'):
        self.x0=x0
        self.y0=y0
        self.sizex=sizex
        self.sizey=sizey
        self.colour=colour
        
    def createtreasure(self,canvas):
        rv=random.randint(0,self.l1)
        self.tx1=listavoidx[rv]
        self.ty1=listavoidy[rv]
        self.tr1=canvas.create_oval(self.tx1+10,self.ty1+10,self.tx1+20,self.ty1+20,fill='gold')
        return (self.tr1)

    def startroam(self):
        l4=len(listavoidx1)
        self.ox0=random.randint(0,l4)
        self.oy0=random.randint(0,l4)
        return(self.ox0,self.oy0)

    def roam(self):
        ox0=self.ox0
        oy0=self.oy0
        l4=len(listavoidx1)
        ob=0
        large=0
        if abs((ox0-15)-self.x0)<23 and abs((oy0-15)-self.y0)<23:
            while listavoidx1[l4-1] != listavoidx1[large+ob] :
                odx1=listavoidx1[large]
                ody1=listavoidy1[large]
                ox0=(odx1+15)-self.x0
                oy0=(ody1+15)-self.y0
                ox01=(listavoidx[large+ob]+15)-self.x0
                oy01=(listavoidy[large+ob]+15)-self.y0
                od0=math.sqrt(ox0**2+oy0**2)
                od01=math.sqrt(ox01**2+oy01**2)
                if  od0>od01:
                    large=large+ob
                    ob=1

        
                else:
                    ob=ob+1
        
            
        self.x01=ox0
        if self.x01>0: 
            self.y01=oy0
            if self.y01<0:
                hyp1=math.sqrt(self.x01**2+self.y01**2)
                ang1=math.acos(abs(self.x01)/hyp1)
                lg1=hyp1/5
                movx1=(hyp1/lg1*math.cos(ang1))
                movy1=-(hyp1/lg1*(math.cos(90-ang1)))
            if self.y01>0:
                hyp1=math.sqrt(self.x01**2+self.y01**2)
                ang1=math.acos(abs(self.x01)/hyp1)
                lg1=hyp1/5
                movx1=(hyp1/lg1*math.cos(ang1))
                movy1=(hyp1/lg1*math.cos(90-ang1))
        if self.x01<0: 
            self.y01=oy0
            if self.y01<0:
                hyp1=math.sqrt(self.x01**2+self.y01**2)
                ang1=math.acos(abs(self.x01)/hyp1)
                lg1=hyp1/5
                movx1=-(hyp1/lg1*math.cos(ang1))
                
                movy1=-(hyp1/lg1*(math.cos(90-ang1)))
            if self.y01>0:
                hyp1=math.sqrt(self.x01**2+self.y01**2)
                ang1=math.acos(abs(self.x01)/hyp1)
                lg1=hyp1/5
                movx1=-(hyp1/lg1*math.cos(ang1))
                movy1=(hyp1/lg1*math.cos(90-ang1))
        
        for m in range(self.l1):
            ox1=(listavoidx[m]+15)-(self.x0)
            oy1=(listavoidy[m]+15)-(self.y0)
            od1=math.sqrt(ox1**2+oy1**2)
            if od1<22:
                for b in range(3):
                    if ox1>0:
                        if oy1>0:
                            if movx1>movy1:
                                movy1=-15
                                movx1=-15
                            if movy1>movx1:
                                movx1=-15
                                movy1=-15
                        if oy1<0:
                            if movx1>movy1:
                                movy1=15
                                movx1=-15
                            if movy1>movx1:
                                movx1=-15
                                movy1=15
                    if ox1<0:
                        if oy1>0:
                            if movx1>movy1:
                                movy1=-15
                                movx1=15
                            if movy1>movx1:
                                movx1=15
                                movy1=-15              
                        if oy1<0:
                            if movx1>movy1:
                                movy1=-15
                                movx1=15
                            if movy1>movx1:
                                movx1=15
                                movy1=15
                    self.canvas.coords(self.shape , self.x0, self.y0, self.x0 + self.sizex, self.y0 + self.sizey) 
                    self.canvas.update()

        if abs((ox0-15)-self.x0)<23 and abs((oy0-15)-self.y0)<23:
            listavoidx1.remove(odx1)
            listavoidy1.remove(ody1)

        self.x0+=movx1
        self.y0+=movy1

        print listavoidx1
        print listavoidx
        self.canvas.coords(self.shape , self.x0, self.y0, self.x0 + self.sizex, self.y0 + self.sizey) 
        self.canvas.update()
        return(self.x01,self.y01,movx1,movy1)        

    def traffic(self): 
                if i==250 or i==500 or i==750:
                    self.OR = canvas.create_oval(self.x0+20,self.y0+20,self.x0+40,self.y0-20, fill='red')
                    self.canvas.update()
                    time.sleep(1)
                    self.canvas.delete(self.OR)
                    self.OA = canvas.create_oval(self.x0+20,self.y0+20,self.x0+40,self.y0-20, fill='yellow')
                    self.canvas.update()
                    time.sleep(1)
                    self.canvas.delete(self.OA)
                    self.OG = canvas.create_oval(self.x0+20,self.y0+20,self.x0+40,self.y0-20, fill='green')
                    self.canvas.update()
                    time.sleep(0.5)
                    self.canvas.delete(self.OG)

    def changetreasure(self):
        global score
        if abs(self.x0-self.tx1)<25 and abs(self.y0+-self.ty1)<25:
            rv=random.randint(0,self.l1)
            self.tx1=listavoidx[rv]
            self.ty1=listavoidy[rv]
            canvas.delete(self.tr1)
            self.tr1=canvas.create_oval(self.tx1+10,self.ty1+10,self.tx1+20,self.ty1+20,fill='gold')
            canvas.update()
            score+=1
            listavoidx1=list(listavoidx)
            listavoidy1=list(listavoidy)
            time.sleep(3)

    def score2(self):
        global score
        d1t=math.sqrt((self.x0-self.tx1)**2+(self.y0-self.ty1)**2)
        score1.config(text="the amount of times the treasure has be found is %s" %(score))
        score1.pack()
try1=treasure()
try1.drawRobot(canvas)
for h in range (12):
    try1.drawObstacle(canvas)
listavoidx1=listavoidx[:]
listavoidy1=listavoidy[:]
try1.createtreasure(canvas)
try1.startroam()
for i in range (1000):
    try1.roam()
    try1.changetreasure()
    try1.traffic()
    try1.score2()
    time.sleep(0.1)

window.mainloop() 
